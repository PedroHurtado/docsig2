
1. Callback

//https://developer.mozilla.org/es/docs/Glossary/Callback_function

function filter(input,predicate){
    const result = []
    for(const value of input){
        if(predicate(value)){
            result.push(value)
        }
    }
    return result
}

filter([1,2,3,4,5,6], v=>v%2===0)

2. Clouruse
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures
    La instanciacion de un objeto a traves de la llamada a una
    function que devuelve otra funcion

    function sum(a){
        return function(b){
            debugger
            return a+b
        }
    }

    sum(5)(3)->8

    const result = sum(5)
    result(100) //105
    result(30) //35

    //Gestion de eventos
    function events(node,event,cb){
        node.addEventListener(event,cb)
        return ()=>node.removeEventListener(event,cb)
    }

    const dispose = events(document,'click',console.log)
    dipose()->libero el evento

    //https://angular.dev/guide/signals

    function signal(initialValue){
        
        let value = initialValue //state

        const fn = ()=>value   //getter
        
        fn.set = newValue=>{ //setter
            if(newValue!=value){
                const msg = `El valor  actual es ${newValue} y el valor anterior es ${value}`
                console.log(msg)
                value=newValue
            }
            
        }
        return fn
    }

3 Generator

    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator

    function filter(input,predicate){
        const result = []
        for(const value of input){
            if(predicate(value)){
                result.push(value)
            }
        }
        return result
    }

    1. problema de memoria
    2. bloqueante


    function* filter(input,predicate){
        
        for(const value of input){
            if(predicate(value)){
                yield value
            }
        }
        
    }

    const result = filter([1,2,3,4,5,6], v=>v%2===0)
    result.next()
    result.next()
    result.next() 
    result.next() {value:undefined, done:true}

    consumir->next
    produccer->yield

    https://github.com/tc39/proposal-iterator-helpers